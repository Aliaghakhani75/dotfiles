# Bash Configuration

# Keep new files and directories private by default
umask 077

# Helper to keep only the first occurence of each component of a
# colon-separated path string.
_deduplicate_path_components() {
    echo "$1" | awk -v RS=: -v ORS=: '!a[$1]++' | sed -e 's/:$//'
}

# Set a sensible $PATH:
# - OSX and Homebrew: add Homebrew's sbin/, and use GNU coreutils
# - Add a few "standard" dirs inside $HOME
unset dir
if [[ "$OSTYPE" == darwin* && -n $(type brew 2>/dev/null) ]]; then
    brew_prefix=$(brew --prefix)
    PATH="${brew_prefix}/opt/coreutils/libexec/gnubin:${brew_prefix}/sbin:${PATH}"
    MANPATH="${brew_prefix}/opt/coreutils/libexec/gnuman${MANPATH:+:${MANPATH}}"
    unset brew_prefix
fi
for dir in ~/.npm/bin ~/.pyenv/shims ~/.local/bin ~/bin; do
    if [[ -d "${dir}" ]]; then
        PATH="${dir}:${PATH}"
    fi
done
unset dir
PATH=$(_deduplicate_path_components "${PATH}")
MANPATH=$(_deduplicate_path_components "${MANPATH}")

# Make sure $HOSTNAME is set
if [[ -z "${HOSTNAME}" ]]; then
    HOSTNAME=$(hostname)
    export HOSTNAME
fi

# Interactive shells
if [[ "$PS1" ]]; then
    # Helper to emulate "set -x" output
    _run_verbose() {
        (
            # Strip visible escape sequences from $PS4; bash prompting works differently from echo.
            printf "%b" "${PS4}" | sed -e 's/\\\[//g' -e 's/\\\]//g'
            echo "$@"
        ) >&2
        "$@"
    }

    join_by () {
        local IFS="$1"
        shift
        echo "$*"
    }

    shorten_path() {
        # shorten a directory name. keep last n components intact and
        # truncate the components in front of it (with special
        # handling of .hidden components). add an ellipsis when the
        # value has been truncated.
        dir=$1
        n=$2
        dir=${1##$HOME/}
        tail=$(echo "${dir}" | rev | cut -d/ -f"-${n}" | rev)
        head=${dir%%$tail}
        if [ -n "${head}" ]; then
            # shellcheck disable=SC2001
            head=$(echo "$head" | sed -e 's#\(\(\.\?[^/]\{1\}\)[^/]\+/\?\)#\2/#g')
            head="${head%%/}â€¦/"
        fi
        echo "${head}${tail}"
    }

    # Git status in prompt using __git_ps1()
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM="git verbose"

    # Trailing newline warning using cursor column detection
    #
    # The "tput u7" (user string #7) for xterm results in the required "\e[6n"
    # escape sequence, but this user string is not available for all terminal
    # types. (The "screen" term does not have it, for example.)
    _prompt_newline_warning_enabled=0;
    _prompt_enable_newline_warning() {
        if [[ ! -z "$(echo -en "\e[6n")" ]]; then
            _prompt_newline_warning_enabled=1;
            _cursor_column() {
                exec < /dev/tty
                local stty_save
                stty_save=$(stty -g)
                stty raw -echo min 0
                echo -en "\e[6n" > /dev/tty
                stty "$stty_save"
                local curcol
                read -r -s -d _ curcol
                curcol="${curcol##*;}"
                echo -n "$curcol"
            }
        else
            _prompt_newline_warning_enabled=0;
            echo -e "\e[1;31mWarning: terminal does not support cursor column detection; newline detection disabled"
        fi
    }
    _prompt_disable_newline_warning() {
        _prompt_newline_warning_enabled=0;
    }

    # Time range formatting
    _fmt_seconds_elapsed() {
        local n=$1
        local output=""
        local h=$((n / 3600))
        [[ $h -gt 0 ]] && output+="${h}h"
        n=$((n % 3600))
        local m=$((n / 60))
        [[ $m -gt 0 ]] && output+="${m}m"
        s=$((n % 60))
        output+="${s}s"
        echo "${output}"
    }

    # Use a DEBUG trap to store timer information before a command is executed.
    # The _timer_start variable is cleared in the prompt command function.
    trap '[[ -z "${_timer_start:-}" ]] && _timer_start=${SECONDS}' DEBUG

    set_prompt_command() {
        # Save exit code from previous command
        local prev_exit_code=$?

        # Colour definitions
        local colour_normal="\[\e[0m\]"
        # local colour_black="\[\e[0;30m\]"
        # local colour_black_bold="\[\e[1;30m\]"
        local colour_red="\[\e[0;31m\]"
        # local colour_red_bold="\[\e[1;31m\]"
        local colour_green="\[\e[0;32m\]"
        # local colour_green_bold="\[\e[1;32m\]"
        local colour_yellow="\[\e[0;33m\]"
        # local colour_yellow_bold="\[\e[1;33m\]"
        local colour_blue="\[\e[0;34m\]"
        # local colour_blue_bold="\[\e[1;34m\]"
        local colour_purple="\[\e[0;35m\]"
        # local colour_purple_bold="\[\e[1;35m\]"
        local colour_cyan="\[\e[0;36m\]"
        # local colour_cyan_bold="\[\e[1;36m\]"
        # local colour_white="\[\e[0;37m\]"
        # local colour_white_bold="\[\e[1;37m\]"

        # Error
        local prompt_err=""
        if [[ ${prev_exit_code} -ne 0 ]]; then
            local exit_status=${prev_exit_code}
            # Lookup signal numbers between 0 and 64; these are returned as
            # exit codes between 128 and 192
            if [[ ${prev_exit_code} -gt 128 && ${prev_exit_code} -lt 192 ]]; then
                exit_status=$((128-prev_exit_code))" "$(kill -l ${prev_exit_code} 2>/dev/null || echo -n '?')
            fi
            prompt_err="exit ${exit_status}"
        fi

        # Time since previous command
        local prompt_timer=""
        if [[ -n "${_timer_start}" ]]; then
            local seconds_elapsed=$((SECONDS - _timer_start))
            if [[ $seconds_elapsed -ge 10 ]]; then
                seconds_elapsed=$(_fmt_seconds_elapsed ${seconds_elapsed})
                prompt_timer+="${seconds_elapsed} elapsed"
            fi
            _timer_start=""
        fi

        # Save history so that newly opened shells immediately see it.
        history -a

        # Hook for direnv.
        if type _direnv_hook &>/dev/null; then
            _direnv_hook
        fi

        # Show "umbrella name". This is useful for directories that act as
        # containers for projects, e.g. ~/Projects. By storing a short word in
        # a file called ".umbrella" the prompt will show that word and the
        # name of the topmost child directory under that umbrella dir.
        local prompt_umbrella=''
        local tt_umbrella=''
        if [[ -r ".umbrella" ]]; then
            prompt_umbrella=$(command cat .umbrella)
        else
            local dir="${PWD}"
            local prefix
            while [[ $dir != '/' ]]; do
                if [[ -r "${dir}/../.umbrella" ]]; then
                    prefix=$(command cat "${dir}/../.umbrella")
                    project=$(basename "${dir}")
                    prompt_umbrella="${prefix} ${project,,}"
                    break
                fi
                dir=$(dirname "$dir")
            done
        fi
        tt_umbrella="${prompt_umbrella}"
        if [ -n "${prompt_umbrella}" ]; then
            prompt_umbrella="${colour_blue}${prompt_umbrella}"
        fi

        # User name (only if non-standard)
        local prompt_user=""
        local prompt_user_colour="${colour_blue}"
        local prompt_sign_colour="${colour_green}"
        if [[ "$USER" == "root" ]]; then
            prompt_user_colour="${colour_red}"
            prompt_sign_colour="${colour_red}"
        fi
        case "${USER}" in
            (wbolster|uws)
                prompt_user=""
                ;;
            (*)
                prompt_user="${colour_normal}as ${prompt_user_colour}${USER}"
                ;;
        esac

        # Host name (only remote without screen/tmux)
        local prompt_hostname=""
        local tt_hostname=""
        if [[ -n "${SSH_CLIENT:-}" && "${TERM}" != screen* ]]; then
            prompt_hostname="${colour_normal}on ${colour_blue}${HOSTNAME}"
            tt_hostname="${HOSTNAME}"
        fi

        # Working directory
        local prompt_wd=""
        local tt_wd="\w"
        if [[ "${PWD}" != "${HOME}" ]]; then
            short_pwd=$(shorten_path "$PWD" 3)
            prompt_wd="${colour_normal}in ${colour_green}${short_pwd}"
            tt_wd="${short_pwd}"
        fi

        # Git
        local prompt_git=""
        if type __git_ps1 &>/dev/null; then
            local _git_ps1_output
            _git_ps1_output="$(__git_ps1 '%s')"
            if [[ -n "${_git_ps1_output}" ]]; then
                prompt_git="${colour_normal}git ${colour_yellow}${_git_ps1_output}"
            fi
        fi

        # Virtualenv
        local prompt_venv=""
        if [[ -n "${VIRTUAL_ENV:-}" ]]; then
            local venv_name
            if [[ "${VIRTUAL_ENV}" == */.direnv/* ]]; then
                venv_name="$(basename "$(dirname "$(dirname "${VIRTUAL_ENV}")")")"
            else
                venv_name="$(basename "${VIRTUAL_ENV}")"
            fi
            prompt_venv="${colour_normal}venv ${colour_cyan}${venv_name}"
        fi

        # Warning when output does not have a trailing newline
        local prompt_newline_warning=""
        if [[ ${_prompt_newline_warning_enabled} -eq 1 ]]; then
            if [[ "$(_cursor_column)" -ne 1 ]]; then
                prompt_newline_warning="no newline"
            fi
        fi

        # Background jobs
        local prompt_jobs=""
        local n_jobs n_jobs_background n_jobs_suspended
        n_jobs="$(jobs -p | wc -w)"
        if [[ ${n_jobs} -gt 0 ]]; then
            n_jobs_background="$(jobs -p -r | wc -w)"
            n_jobs_suspended="$(jobs -p -s | wc -w)"
            prompt_jobs=""
            if [[ $((n_jobs_background + n_jobs_suspended)) -gt 0 ]]; then
                prompt_jobs="${colour_normal}jobs ${colour_purple}"
            fi
            if [[ ${n_jobs_background} -gt 0 ]]; then
                prompt_jobs+=" ${n_jobs_background}&"
            fi
            if [[ ${n_jobs_suspended} -gt 0 ]]; then
                prompt_jobs+=" ${n_jobs_suspended}^Z"
            fi
        fi

        # Terminal title (execution/echoing embedded in $PS1)
        local term_title=""
        case $TERM in
            (xterm*|rxvt*)  term_title="\[\e]0;${tt_umbrella:+${tt_umbrella} }${tt_hostname:+${tt_hostname}:}${tt_wd}\a\]" ;;
        esac

        # Status line about previous command
        local status_line_previous=""
        status_line_previous+="${prompt_newline_warning:+\n${colour_red}${prompt_newline_warning}  }"
        status_line_previous+="${prompt_err:+${colour_red}${prompt_err}  }"
        status_line_previous+="${prompt_timer:+${colour_green}${prompt_timer}  }"

        # Status line with other information
        # fixme: use array and join_by?
        local prompt_status_line_other=""
        prompt_status_line_other+="${prompt_user:+${prompt_user} }"
        prompt_status_line_other+="${prompt_hostname:+${prompt_hostname} }"
        prompt_status_line_other+="${prompt_umbrella:+${prompt_umbrella} }"
        prompt_status_line_other+="${prompt_venv:+${prompt_venv} }"
        prompt_status_line_other+="${prompt_wd:+${prompt_wd} }"
        prompt_status_line_other+="${prompt_git:+${prompt_git} }"
        prompt_status_line_other+="${prompt_jobs:+${prompt_jobs} }"

        # Primary prompt
        PS1="\n"
        PS1+="${term_title}"
        PS1+="${status_line_previous:+${status_line_previous%% }\n}"
        PS1+="${prompt_status_line_other:+${prompt_status_line_other%% }\n}"
        PS1+="${prompt_sign_colour}\\$""${colour_normal} "

        # Additional prompts
        PS2="${prompt_sign_colour}> ${colour_normal}"  # Secondary prompt (continuation lines)
        # PS4="${colour_purple}+ ${colour_normal}"  # Output from "set -x"
        # PS4=$(printf "%b" "${colour_purple}+ ${colour_normal}" \
                  # | sed -e 's/\\\[//g' -e 's/\\\]//g') # Output from "set -x"
    }
    PROMPT_COMMAND=set_prompt_command

    # Globbing. This makes both "echo *" (only non-hidden files) and "echo .*"
    # (only hidden files, ignoring . and ..) work as intended.
    GLOBIGNORE=".:.."
    shopt -u dotglob  # ... since setting GLOBIGNORE enables dotglob as a side effect :-(
    shopt -s extglob

    # Disable annoying beeps
    if type setterm &>/dev/null; then
        setterm -blength 0 2>/dev/null
    fi

    # Completion
    for file in /usr/share/bash-completion/bash_completion /etc/bash_completion /usr/local/share/bash-completion/bash_completion; do
        if [[ -f "$file" ]]; then
            source "$file"
            break  # stop after first match
        fi
    done
    for file in ~/.bash_completion ~/.bash_completion_*; do
        if [[ -f "${file}" ]]; then
            source "$file"
        fi
    done
    unset file

    # Directory changing (and creation)
    export CDPATH=.:~:~/Projects
    shopt -s autocd
    ..() { cd .. ; }
    -() { cd - ; }
    cd() {
        if [[ $# == 2 && "$1" != -* ]]; then
            # Two args, no options: do simple path replacement, e.g. "cd site1 site2".
            _run_verbose builtin cd "${PWD/$1/$2}"
        elif [[ -e "$1" && ! -d "$1" ]]; then
            _run_verbose builtin cd "$(dirname "$1")"
        else
            builtin cd "$@"
        fi
    }
    mcd() {
        mkdir --verbose --parents "$1" && cd "$1"
    }

    _print_nyan_cat() {
        # This image needs a terminal of at least 104 columns wide to show up properly.
        if [[ $COLUMNS -lt 104 ]]; then
            return
        fi
        printf "\e[48;5;196m            \e[0m              \e[48;5;196m                \e[0m                \e[48;5;16m                              \e[0m\n"
        printf "\e[48;5;196m                                                        \e[48;5;16m  \e[48;5;230m                              \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;214m            \e[48;5;196m              \e[48;5;214m                \e[48;5;196m            \e[48;5;16m  \e[48;5;230m      \e[48;5;175m                      \e[48;5;230m      \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;214m                                                      \e[48;5;16m  \e[48;5;230m    \e[48;5;175m          \e[48;5;162m  \e[48;5;175m    \e[48;5;162m  \e[48;5;175m        \e[48;5;230m    \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;214m                                                      \e[48;5;16m  \e[48;5;230m  \e[48;5;175m    \e[48;5;162m  \e[48;5;175m              \e[48;5;16m    \e[48;5;162m  \e[48;5;175m    \e[48;5;230m  \e[48;5;16m  \e[0m    \e[48;5;16m    \e[0m\n"
        printf "\e[48;5;226m            \e[48;5;214m              \e[48;5;226m                \e[48;5;214m            \e[48;5;16m  \e[48;5;230m  \e[48;5;175m                  \e[48;5;16m  \e[48;5;240m    \e[48;5;16m  \e[48;5;175m    \e[48;5;230m  \e[48;5;16m  \e[0m  \e[48;5;16m  \e[48;5;240m    \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;226m                                                      \e[48;5;16m  \e[48;5;230m  \e[48;5;175m          \e[48;5;162m  \e[48;5;175m      \e[48;5;16m  \e[48;5;240m      \e[48;5;175m    \e[48;5;230m  \e[48;5;16m    \e[48;5;240m      \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;226m                                                      \e[48;5;16m  \e[48;5;230m  \e[48;5;175m                  \e[48;5;16m  \e[48;5;240m      \e[48;5;16m        \e[48;5;240m        \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;118m            \e[48;5;226m              \e[48;5;118m                \e[48;5;226m            \e[48;5;16m  \e[48;5;230m  \e[48;5;175m                  \e[48;5;16m  \e[48;5;240m                      \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;118m                                                  \e[48;5;16m      \e[48;5;230m  \e[48;5;175m            \e[48;5;162m  \e[48;5;175m  \e[48;5;16m  \e[48;5;240m                          \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;118m                                              \e[48;5;16m    \e[48;5;240m    \e[48;5;16m  \e[48;5;230m  \e[48;5;175m  \e[48;5;162m  \e[48;5;175m            \e[48;5;16m  \e[48;5;240m      \e[48;5;231m  \e[48;5;16m  \e[48;5;240m        \e[48;5;231m  \e[48;5;16m  \e[48;5;240m    \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;33m            \e[48;5;118m              \e[48;5;33m                \e[48;5;118m    \e[48;5;240m        \e[48;5;16m  \e[48;5;230m  \e[48;5;175m                \e[48;5;16m  \e[48;5;240m      \e[48;5;16m    \e[48;5;240m    \e[48;5;16m  \e[48;5;240m  \e[48;5;16m    \e[48;5;240m    \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;33m                                            \e[48;5;16m  \e[48;5;240m  \e[48;5;16m  \e[48;5;33m    \e[48;5;16m  \e[48;5;230m    \e[48;5;175m      \e[48;5;162m  \e[48;5;175m      \e[48;5;16m  \e[48;5;240m  \e[48;5;175m    \e[48;5;240m                \e[48;5;175m    \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;19m            \e[48;5;33m              \e[48;5;19m                \e[48;5;33m    \e[48;5;16m  \e[48;5;33m      \e[48;5;16m  \e[48;5;230m      \e[48;5;175m              \e[48;5;16m  \e[48;5;240m      \e[48;5;16m            \e[48;5;240m    \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;19m                                                      \e[48;5;16m    \e[48;5;230m                    \e[48;5;16m  \e[48;5;240m                  \e[48;5;16m  \e[0m\n"
        printf "\e[48;5;19m                                                    \e[48;5;16m  \e[48;5;240m    \e[48;5;16m                                        \e[0m\n"
        printf "            \e[48;5;19m              \e[0m                \e[48;5;19m          \e[48;5;16m  \e[48;5;240m    \e[48;5;16m  \e[0m  \e[48;5;16m  \e[48;5;240m  \e[48;5;16m  \e[0m            \e[48;5;16m  \e[48;5;240m  \e[48;5;16m  \e[0m  \e[48;5;16m  \e[48;5;240m    \e[48;5;16m  \e[0m\n"
        printf "                                                    \e[48;5;16m      \e[0m      \e[48;5;16m    \e[0m              \e[48;5;16m    \e[0m    \e[48;5;16m      \e[0m\n"
    }

    # Callback when a command could not be found.
    command_not_found_handle() {
        local cmd="$1"

        # Magic typo corrector. Handles typos like "gitp ush" and "gitpu sh".
        local autocorrect_cmds="bzr git svn"
        for prefix in $autocorrect_cmds; do
            if [[ "${cmd#$prefix}" == "$cmd" ]]; then
                # prefix is not a prefix of the typed command
                continue
            fi
            _run_verbose "${prefix}" "${cmd#${prefix}}$2" "${@:3}"
            return
        done

        # Think. Before. Doing.
        _print_nyan_cat

        # Too bad
        printf "%s: command not found\n" "$1" >&2
        return 127
    }

    # History
    shopt -s histappend
    export HISTCONTROL=ignorespace:ignoredups
    export HISTSIZE=100000
    export HISTFILESIZE=1000000
    alias h='unset HISTFILE'

    # Require confirmation for possibly destructive operations
    alias cp='cp -i'
    alias mv='mv -i'
    alias rm='rm -i'
    export IGNOREEOF=1  # Require twice Ctrl-D to exit.

    # File listings
    # shellcheck disable=SC2010
    if ls --version 2>/dev/null | grep -q -F 'ls (GNU coreutils)'; then
        alias ls='ls --color=auto --group-directories-first'
        alias l='ls -l --color=auto --human-readable --classify --group-directories-first'
        alias ll='ls -l --color=auto --almost-all --classify --group-directories-first'
    else
        alias l='ls -lhF'
        alias ll='ls -lAF'
    fi

    # Show colors in grep output
    alias grep='grep --color=auto'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'

    # Process listings and process control
    alias psg='ps auxww |grep -i'
    complete -F _killall psg
    alias k1='kill %1'
    alias k2='kill %2'
    alias k3='kill %3'

    # common chmod invocations
    alias chmod-public='chmod u=rwX,go=rX'
    alias chmod-public-with-group='chmod ug=rwX,o=rX'
    alias chmod-private='chmod u=rwX,go='
    alias chmod-private-with-group='chmod ug=rwX,o='
    alias rchmod-public='chmod -R u=rwX,go=rX'
    alias rchmod-public-with-group='chmod -R ug=rwX,o=rX'
    alias rchmod-private='chmod -R u=rwX,go='
    alias rchmod-private-with-group='chmod -R ug=rwX,o='

    # Alias expansion also after these commands
    alias sudo='sudo '
    alias nice='nice '
    alias xargs='xargs '

    # Editor
    if type vim &>/dev/null; then
        export EDITOR=vim
        alias vi=vim
    else
        export EDITOR=vi
    fi
    alias ni=vi
    alias :q='exit'
    alias :e='$EDITOR'
    em () {
        emacs "$@" |& >/dev/null &
        disown emacs
    }

    # Pager
    alias lessr='less -R'
    maybe-pager() {
        if [[ -t 1 ]]; then  # stdout is a terminal
            less -FRX
        else
            command cat
        fi
    }
    alias p='maybe-pager'

    # Detect direnv (https://github.com/direnv/direnv). The regular loading
    # method does not cooperate well with our $PROMPT_COMMAND (it breaks $?
    # detection).
    if type direnv &>/dev/null; then
        # Copied from "direnv hook bash" output:
        _direnv_hook_enabled=1
        _direnv_hook() {
            if [ $_direnv_hook_enabled == "1" ]; then
                eval "$(direnv export bash)"
            fi
        };
        direnv-freeze() {
            if [[ $# -eq 1 ]]; then
                echo "direnv: setting up shell environment for directory $1"
                pushd "$1" > /dev/null || return 1
                eval "$(direnv export bash)"
                popd > /dev/null
            fi
            echo "direnv: disabling shell hook; use direnv-thaw to enable again"
            _direnv_hook_enabled=0
        }
        direnv-thaw() {
            echo "direnv: enabling shell hook"
            _direnv_hook_enabled=1
        }
        complete -F _cd direnv-freeze
    fi

    # Development
    alias m=make
    complete -F _make m
    if type git &>/dev/null; then
        cdgitroot() {
            cd "$(git rev-parse --show-toplevel)"
        }
    fi
    if type hub &>/dev/null; then
        alias git=hub
    fi
    syntax-highlight() {
        pygmentize -l "$@" | maybe-pager
    }

    # Multiple python installations via pyenv
    if type pyenv &>/dev/null && [[ $(type -t pyenv) != "function" ]]; then
        # After initialisation, pyenv provides a shell function that masks the
        # actual executable. Initialize if pyenv is available but not loaded,
        # but ignore the line setting PATH since that is already set up.
        eval "$(pyenv init - | grep -v 'export PATH=')"
    fi

    # python development
    export PYTHONDONTWRITEBYTECODE=1
    alias ipy=ipython
    py-cprofile() {
        if [[ $# -lt 1 ]]; then
            printf "Error: no Python program specified. Usage:\n\n    %s some-program --some-args\n" "${FUNCNAME[0]}" > /dev/stderr
            return
        fi
        local prog="$1"
        shift
        if [[ ! -f "$prog" ]]; then
            prog="$(which "$prog")"
        fi
        local profile_file
        profile_file="$(mktemp 'python-cprofile-XXXXXX.prof')"
        python -m cProfile -o "$profile_file" "$prog" "$@"
        echo > /dev/stderr
        printf 'sort cumulative\nstats 30\n' | python -m pstats "$profile_file" 1>&2
        echo > /dev/stderr
        echo "Profile stored in ${profile_file}" > /dev/stderr
    }
    py-pdb() {
        python -m pdb "$(which "$1")" "${@:2}"
    }
    py-ipdb() {
        python -m ipdb "$(which "$1")" "${@:2}"
    }
    pytestf() {
        _run_verbose pytest --tb=short --color=yes --looponfail --verbose --verbose "$@"
    }

    # Data conversion
    yaml-to-json() {
        python -c 'import json, sys, yaml; print(json.dumps(yaml.safe_load(open(sys.argv[1]) if sys.argv[1:] else sys.stdin), indent=2, sort_keys=True))' "$@"
    }
    json-to-yaml() {
        python -c 'import json, sys, yaml; print(yaml.safe_dump(json.load(open(sys.argv[1]) if sys.argv[1:] else sys.stdin), default_flow_style=False))' "$@"
    }

    # Jhbuild
    if type jhbuild &>/dev/null; then
        alias 'jhr'='jhbuild run'
        alias 'jhbo'='jhbuild buildone'
        alias 'jhboa'='jhbuild buildone -a'
        alias 'jhboac'='jhbuild buildone -a -c'
        alias 'jhs'='jhbuild shell'
    fi

    # GUI applications
    if [[ "$OSTYPE" == darwin* ]]; then
        alias g='open'
    elif [[ ! -z "$DISPLAY" ]]; then
        alias g='xdg-open'
    fi

    # Locale
    alias locale-none='unset LANG LANGUAGE'
    alias locale-en='unset LANGUAGE; export LANG=en_GB.UTF-8'
    alias locale-nl='unset LANGUAGE; export LANG=nl_NL.UTF-8'

    # Debian and Ubuntu
    if type apt-get &>/dev/null; then
        alias apt='sudo apt'
        alias apt-get='sudo apt-get'
        alias aptitude='sudo aptitude'
        alias ac='apt-cache show'
        alias acp='apt-cache policy'
        alias acs='apt-cache search'
        i() {
            _run_verbose sudo apt install -V "$@"
        }
        u() {
            (
            set -e
            _run_verbose sudo apt update
            _run_verbose sudo apt upgrade -V
            )
        }
        _apt_get_packages() {
            local cur
            cur=${COMP_WORDS[COMP_CWORD]}
            COMPREPLY=($(apt-cache --no-generate pkgnames "${cur}" 2>/dev/null))
            return 0
        }
        complete -F _apt_get_packages i ac acp
    fi

    # Mac OSX
    if [[ "$OSTYPE" == darwin* && -n $(type brew 2>/dev/null) ]]; then
        # Homebrew
        i() {
            _run_verbose brew install "$@"
        }
        complete -F _brew_install i
        u() {
            (
            set -e
            local updates
            _run_verbose brew update
            updates="$(brew outdated | grep -v -F -f <(find "$(brew --prefix)"/Library/PinnedKegs/ -mindepth 1 -maxdepth 1 -type "l" -printf '%f\n') | xargs --no-run-if-empty brew outdated --verbose || true)"
            if [[ -n "${updates}" ]]; then
                echo
                echo "These packages will be upgraded:"
                echo "${updates}"
                echo
                read -r -p 'Continue upgrade? [Y/n] ' -n1 CONFIRM
                if [[ "${CONFIRM}" =~ ^[Yy]?$ ]]; then
                    _run_verbose brew upgrade
                fi
            fi
            echo
            )
        }
    fi

    # iTerm profile tricks
    if [[ ! -z "$ITERM_PROFILE" && -z "$INSIDE_EMACS" ]]; then
        _ITERM_PROFILE_FILE=~/.config/iterm-profile
        _iterm_profile() {
            printf "\e]50;SetProfile=%s\a" "$1"
            echo "$1" >| ${_ITERM_PROFILE_FILE}
        }
        dark() {
            _iterm_profile "Default"
        }
        light() {
            _iterm_profile "Light"
        }
        if [[ -e ${_ITERM_PROFILE_FILE} ]]; then
            _iterm_profile "$(cat "${_ITERM_PROFILE_FILE}")"
        fi
    fi

    # Show a file with syntax highlighting (when possible) through a pager (when necessary)
    show() {
        (
            set -e
            if [[ -z "$@" || ("$#" == 1 && "$1" == "-") ]]; then
                # In case no args are specified or only "-" is passed, set "$@" to
                # /dev/stdin so that the logic below works as intended without
                # having to special case the "stdin as a pipe" scenario.
                set - '/dev/stdin';
            fi
            local file
            for file in "$@"; do
                # Only readable, regular files (e.g. not special files like
                # /dev/stdin) can be peeked into.
                local can_peek
                if [[ -f "$file" && -r "$file" ]]; then
                    can_peek="yes"
                else
                    can_peek="no"
                fi
                if [[ -r "$file" ]]; then
                    if [[ "$file" == *.txt ]]; then
                        # Don't try to highlight text files; pygmentize
                        # detection is slow and often wrong for those.
                        true
                    elif type pygmentize &>/dev/null; then
                        # Try to use pygments/pygmentize for syntax highlighting.
                        local lexer
                        lexer="$(pygmentize -N "$file")"
                        if [[ "${can_peek}" == "yes" && "${lexer}" == "text" ]]; then
                            # Heuristics to improve pygmentize's detection (which
                            # uses file names only); detect a few file types using
                            # hashbang (#!) lines.
                            case $(head -c 100 "$file" | head -n 1 | grep '^#!') in
                                (*bash*)    lexer=bash ;;
                                (*make*)    lexer=make ;;
                                (*node*)    lexer=js ;;
                                (*perl*)    lexer=perl ;;
                                (*python*)  lexer=python ;;
                                (*ruby*)    lexer=ruby ;;
                                (*sh*)      lexer=sh ;;
                            esac
                        fi
                        if [[ "${lexer}" != "text" ]]; then
                            pygmentize -l "${lexer}" "${file}"
                            continue
                        fi
                    fi
                    if type lolcat &>/dev/null; then
                        # Colours, you can has it. LOLZ. But only if the content
                        # appears to be valid UTF-8, since lolcat doesn't like
                        # files containing binary gibberish.
                        if [[ "${can_peek}" == "yes" ]] && head -c 8K "$file" | iconv -s -f utf8 -t utf8 > /dev/null; then
                            lolcat "$file"
                            continue
                        fi
                    fi
                fi
                # File not readable or no other viewers found; let "cat" handle
                # it, since it's fast and will show error messages.
                command cat "$file"
            done
        ) | maybe-pager
    }

    # This cat has magical powers, like a space cat flying through pizzas with bacon.
    cat() {
        if [[ $# -ge 1 && "${1}" != -* && -t 1 ]]; then
            # Arguments but no flags are specified and stdout is a terminal; perform magic.
            show "$@"
        else
            # Transparent fall-back.
            command cat "$@"
        fi
    }

    # tmux
    tmux() {
        # Turn plain "tmux" into "tmux attach" to automatically attach a
        # session (in conjunction with "new-session" in tmux.conf).
        if [[ $# == 0 ]]; then
            _run_verbose command tmux attach-session
        else
            command tmux "$@"
        fi
    }
    alias itmux='tmux -CC attach-session'  # iTerm2 tmux support

    # Readable $PATH (or similar variables)
    echopath() {
        local value="${1:-${PATH}}"
        echo -e "${value//:/\\n}"
    }

    # Disable Ctrl-S/Ctrl-Q. The past is not the future.
    stty -ixon

    # Misc
    mostfreq() {
        sort -- "$@" | uniq --count | sort --numeric-sort --reverse
    }
    alias sc='screen -UxRR'
    alias uuid4='uuid -v4'
    type sudoedit &>/dev/null || alias sudoedit="sudo -e"
    type hd &>/dev/null || alias hd="hexdump"
    type rgrep &>/dev/null || alias rgrep="grep -r"
fi


#
# Host-specific Configuration
#
# Machine-specific configuration (not kept in version control). The
# bashrc-$HOSTNAME variant is useful for machine specific configuration
# if the home directory is shared over NFS.
#

for file in ~/.bashrc-local ~/.bashrc-"${HOSTNAME}"; do
    if [[ -f "${file}" ]]; then
        source "${file}"
    fi
done

# Force $? to be 0 (for the initial PS1)
true
