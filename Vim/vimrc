" Vim configuration

set nocompatible

" Load bundles using pathogen, and set some flags before loading
let g:fontzoom_no_default_key_mappings = 1
runtime bundle/pathogen/autoload/pathogen.vim
call pathogen#infect()

" Display
set display=lastline,uhex laststatus=2 ruler showcmd
set showmatch
set backspace=2 whichwrap=b,s,h,l,<,>,[,]
set nofoldenable foldmethod=marker
silent! set listchars=eol:$,trail:_,extends:»,precedes:«,tab:»·,nbsp:~

" Colemak, inspired by Emacs evil-colemak-basics https://github.com/ohjames/colemak
map n <down>
map e <up>
map i <right>
noremap k n
noremap K N
noremap u i
noremap U I
noremap l u
noremap L U
noremap N J
noremap E K
noremap I L
noremap t f
noremap T F
noremap f e
noremap F E
noremap j t
noremap J T
nnoremap <c-w>n <c-w>j
nnoremap <c-w>i <c-w>l
nnoremap <c-w>e <c-w>k

" Movement
noremap <C-j> gj
noremap <C-k> gk
noremap <Down> gj
noremap <Up> gk

" Scrolling
set scrolloff=5 sidescrolloff=5
map <Space> <C-D>
map <S-Space> <C-U>
map <Backspace> <C-U>
map <S-Backspace> <C-D>

" Encoding
set encoding=utf-8

" Indentation
set expandtab shiftwidth=4 tabstop=4
set autoindent smartindent

" Wrapping
set linebreak nojoinspaces
let &showbreak="↪ "
silent! set colorcolumn=+1

" Search/replace
set ignorecase smartcase
set hlsearch incsearch
nohlsearch
set gdefault
nnoremap <CR> :let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'<CR>:set hlsearch<CR>:echo<CR>
nnoremap g<CR> :let @/ = expand('<cword>')<CR>:set hlsearch<CR>:echo<CR>

" Whitespace (after an abbreviation)
function! EatWhitespace()
	let c = nr2char(getchar())
	return (c =~ '\s') ? '' : c
endfunction
command! StripTrailingWhitespace silent! normal mx<Enter>:%s/\s\+$//<Enter>:nohlsearch<Enter>`x

" Easy paragraph formatting
noremap Q gqap

" Quickly move to end of line in insert mode
inoremap <C-L> <C-O>A

" Break undo sequence before killing the line
" then intended and it cannot be undone.
inoremap <C-U> <C-G>u<C-U>

" Pressing p should replace selected text in visual mode
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Move lines around using Alt-[hjkl]
noremap <A-h> :<<Return>
noremap <A-j> :move +<Return>
noremap <A-k> :move -2<Return>
noremap <A-l> :><Return>
vnoremap <A-h> :<<Return>gv
vnoremap <A-j> :move '> +<Return>gv
vnoremap <A-k> :move -2<Return>gv
vnoremap <A-l> :><Return>gv
if has("gui_macvim")
  " Alt-[hjkl] results in non-ascii characters depending on the keyboard layout.

  " International keyboard layout
  noremap ˙ :<<Return>
  noremap ∆ :move +<Return>
  noremap ˚ :move -2<Return>
  noremap ¬ :><Return>
  vnoremap ˙ :<<Return>gv
  vnoremap ∆ :move '> +<Return>gv
  vnoremap ˚ :move -2<Return>gv
  vnoremap ¬ :><Return>gv

  " EurKEY keyboard layout
  noremap ù :<<Return>
  noremap ú :move +<Return>
  noremap ĳ :move -2<Return>
  noremap ø :><Return>
  vnoremap ù :<<Return>gv
  vnoremap ú :move '> +<Return>gv
  vnoremap ĳ :move -2<Return>gv
  vnoremap ø :><Return>gv
endif

" Make "repeat last action" also work in visual mode
vnoremap . :normal .<Return>

" Spell checking
command! SpellDutch   setlocal spell spelllang=nl
command! SpellEnglish setlocal spell spelllang=en
command! NoSpell      setlocal nospell

" Active Gnome session?
let g:gnome_active = exists("$GNOME_DESKTOP_SESSION_ID")

" No sync I/O and avoid local cruft; we have VCS'es to keep files safe
set nofsync swapsync=
set directory-=.

" Multiple files
noremap <C-l> :bnext<Return>
noremap <C-h> :bprevious<Return>
set hidden
set autochdir
set suffixes+=.aux,.bbl,.blg,.dvi,.idx,.log,.out,.pdf,.toc,.pyc,.pyo
if strlen($VIRTUAL_ENV) != 0
  " Make :find work for packages installed in the active virtualenv
  execute "set path+=".expand("$VIRTUAL_ENV/lib/python*/site-packages/")
endif

" Misc
set tags=tags;/

" Concealing
function! ToggleConceal()
  if &conceallevel != '0'
    set conceallevel=0
  else
    set conceallevel=2
  endif
endfunction

" Miscellaneous shortcuts
let mapleader = ","
map <silent> <Leader>/ :nohlsearch<Return>
map <silent> <Leader>c :call ToggleConceal()<Return>
map <silent> <Leader>m :make<Return>
map <silent> <Leader>w :StripTrailingWhitespace<Return>
vmap <silent> <Leader>ss :sort i<Return>
vmap <silent> <Leader>si :sort i<Return>
vmap <silent> <Leader>sn :sort n<Return>
vmap <silent> <Leader>su :sort u<Return>

" File type configuration and syntax highlighting (set after loading pathogen)
filetype plugin indent on
syntax on

" Syntastic
let g:syntastic_html_checkers=['tidy']
let g:syntastic_python_checkers=['flake8']

" Colors

if filereadable(expand("~/.config/dark-theme"))
  set background=dark
else
  set background=light
endif
colorscheme solarized
