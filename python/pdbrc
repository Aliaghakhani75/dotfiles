# python debugger (pdb) configuration

# print str() representation, instead of the default repr(),
# intended as additions to the default 'p' and 'pp'.
alias ps p str(%*)
alias pps pp str(%*)

# pretty-print often used expressions:
alias pl pp locals()  # ‘print locals’
alias pv pp vars(%*)  # ‘print vars’
alias pd pp [s for s in dir(%*) if not s.startswith('__')]
alias pda pp dir(%*)  # ‘print dir all’

# pretty-print sqlalchemy queries
alias pq print((%*).compile(compile_kwargs=dict(literal_binds=True)))
alias pqq print((%*).statement.compile(compile_kwargs=dict(literal_binds=True)))
alias ppsql print(__import__('sqlparse').format(str(%*), reindent=True))
alias ppq ppsql ((%*).compile(compile_kwargs=dict(literal_binds=True)))
alias ppqq ppsql ((%*).statement.compile(compile_kwargs=dict(literal_binds=True)))

# pretty-print lxml elements
alias ppx print(__import__('lxml.etree').etree.tounicode((%*), pretty_print=True))

alias ipython __import__('IPython').embed()

# tracebacks that omit third-party code
# fixme: this is not perfect
alias pt print(''.join(y for y in __import__('traceback').format_stack() if '/site-packages/' not in y and '/usr/lib/' not in y))

# preserve readline history between sessions
import atexit
import os
import pathlib
import readline
readline.set_history_length(10000)
history_path = pathlib.Path("~/.pdb_history").expanduser()
if history_path.exists(): readline.read_history_file(history_path)
atexit.register(readline.write_history_file, history_path)
del atexit
del history_path
del os
del pathlib
del readline

# Pressing ‘enter’ after spawning the interactive prompt repeats the
# last expression, so clear it explicitly.
None
